// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/spark.proto

package plugins

import (
	fmt "fmt"
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SparkApplication_Type int32

const (
	SparkApplication_PYTHON SparkApplication_Type = 0
	SparkApplication_JAVA   SparkApplication_Type = 1
	SparkApplication_SCALA  SparkApplication_Type = 2
	SparkApplication_R      SparkApplication_Type = 3
)

var SparkApplication_Type_name = map[int32]string{
	0: "PYTHON",
	1: "JAVA",
	2: "SCALA",
	3: "R",
}

var SparkApplication_Type_value = map[string]int32{
	"PYTHON": 0,
	"JAVA":   1,
	"SCALA":  2,
	"R":      3,
}

func (x SparkApplication_Type) String() string {
	return proto.EnumName(SparkApplication_Type_name, int32(x))
}

func (SparkApplication_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ca8a069b9820144a, []int{0, 0}
}

type SparkApplication struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SparkApplication) Reset()         { *m = SparkApplication{} }
func (m *SparkApplication) String() string { return proto.CompactTextString(m) }
func (*SparkApplication) ProtoMessage()    {}
func (*SparkApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8a069b9820144a, []int{0}
}

func (m *SparkApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparkApplication.Unmarshal(m, b)
}
func (m *SparkApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparkApplication.Marshal(b, m, deterministic)
}
func (m *SparkApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparkApplication.Merge(m, src)
}
func (m *SparkApplication) XXX_Size() int {
	return xxx_messageInfo_SparkApplication.Size(m)
}
func (m *SparkApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_SparkApplication.DiscardUnknown(m)
}

var xxx_messageInfo_SparkApplication proto.InternalMessageInfo

// Custom Proto for Spark Plugin.
type SparkJob struct {
	ApplicationType     SparkApplication_Type `protobuf:"varint,1,opt,name=applicationType,proto3,enum=flyteidl.plugins.SparkApplication_Type" json:"applicationType,omitempty"`
	MainApplicationFile string                `protobuf:"bytes,2,opt,name=mainApplicationFile,proto3" json:"mainApplicationFile,omitempty"`
	MainClass           string                `protobuf:"bytes,3,opt,name=mainClass,proto3" json:"mainClass,omitempty"`
	SparkConf           map[string]string     `protobuf:"bytes,4,rep,name=sparkConf,proto3" json:"sparkConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HadoopConf          map[string]string     `protobuf:"bytes,5,rep,name=hadoopConf,proto3" json:"hadoopConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExecutorPath        string                `protobuf:"bytes,6,opt,name=executorPath,proto3" json:"executorPath,omitempty"`
	// Databricks job configuration.
	// Config structure can be found here. https://docs.databricks.com/dev-tools/api/2.0/jobs.html#request-structure.
	DatabricksConf *_struct.Struct `protobuf:"bytes,7,opt,name=databricksConf,proto3" json:"databricksConf,omitempty"`
	// Databricks access token. https://docs.databricks.com/dev-tools/api/latest/authentication.html
	// This token can be set in either flytepropeller or flytekit.
	DatabricksToken string `protobuf:"bytes,8,opt,name=databricksToken,proto3" json:"databricksToken,omitempty"`
	// Domain name of your deployment. Use the form <account>.cloud.databricks.com.
	// This instance name can be set in either flytepropeller or flytekit.
	DatabricksInstance string `protobuf:"bytes,9,opt,name=databricksInstance,proto3" json:"databricksInstance,omitempty"`
	// The pod spec and metadata to be used as the base configuration when creating the driver Pod for this task.
	// +optional
	//
	// Types that are valid to be assigned to DriverPodValue:
	//	*SparkJob_DriverPod
	DriverPodValue isSparkJob_DriverPodValue `protobuf_oneof:"driverPodValue"`
	// Reference to an existing PodTemplate k8s resource to be used as the base configuration when creating the
	// driver Pod for this task. If this value is set, the specified PodTemplate will be used instead of, but applied
	// identically as, the default PodTemplate configured in FlytePropeller.
	// +optional
	DriverPodTemplateName string `protobuf:"bytes,11,opt,name=driverPodTemplateName,proto3" json:"driverPodTemplateName,omitempty"`
	// The pod spec and metadata to be used as the base configuration when creating the executor Pods for this task.
	// +optional
	//
	// Types that are valid to be assigned to ExecutorPodValue:
	//	*SparkJob_ExecutorPod
	ExecutorPodValue isSparkJob_ExecutorPodValue `protobuf_oneof:"executorPodValue"`
	// Reference to an existing PodTemplate k8s resource to be used as the base configuration when creating the
	// executor Pods for this task. If this value is set, the specified PodTemplate will be used instead of, but applied
	// identically as, the default PodTemplate configured in FlytePropeller.
	// +optional
	ExecutorPodTemplateName string   `protobuf:"bytes,13,opt,name=executorPodTemplateName,proto3" json:"executorPodTemplateName,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *SparkJob) Reset()         { *m = SparkJob{} }
func (m *SparkJob) String() string { return proto.CompactTextString(m) }
func (*SparkJob) ProtoMessage()    {}
func (*SparkJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8a069b9820144a, []int{1}
}

func (m *SparkJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparkJob.Unmarshal(m, b)
}
func (m *SparkJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparkJob.Marshal(b, m, deterministic)
}
func (m *SparkJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparkJob.Merge(m, src)
}
func (m *SparkJob) XXX_Size() int {
	return xxx_messageInfo_SparkJob.Size(m)
}
func (m *SparkJob) XXX_DiscardUnknown() {
	xxx_messageInfo_SparkJob.DiscardUnknown(m)
}

var xxx_messageInfo_SparkJob proto.InternalMessageInfo

func (m *SparkJob) GetApplicationType() SparkApplication_Type {
	if m != nil {
		return m.ApplicationType
	}
	return SparkApplication_PYTHON
}

func (m *SparkJob) GetMainApplicationFile() string {
	if m != nil {
		return m.MainApplicationFile
	}
	return ""
}

func (m *SparkJob) GetMainClass() string {
	if m != nil {
		return m.MainClass
	}
	return ""
}

func (m *SparkJob) GetSparkConf() map[string]string {
	if m != nil {
		return m.SparkConf
	}
	return nil
}

func (m *SparkJob) GetHadoopConf() map[string]string {
	if m != nil {
		return m.HadoopConf
	}
	return nil
}

func (m *SparkJob) GetExecutorPath() string {
	if m != nil {
		return m.ExecutorPath
	}
	return ""
}

func (m *SparkJob) GetDatabricksConf() *_struct.Struct {
	if m != nil {
		return m.DatabricksConf
	}
	return nil
}

func (m *SparkJob) GetDatabricksToken() string {
	if m != nil {
		return m.DatabricksToken
	}
	return ""
}

func (m *SparkJob) GetDatabricksInstance() string {
	if m != nil {
		return m.DatabricksInstance
	}
	return ""
}

type isSparkJob_DriverPodValue interface {
	isSparkJob_DriverPodValue()
}

type SparkJob_DriverPod struct {
	DriverPod *core.K8SPod `protobuf:"bytes,10,opt,name=driverPod,proto3,oneof"`
}

func (*SparkJob_DriverPod) isSparkJob_DriverPodValue() {}

func (m *SparkJob) GetDriverPodValue() isSparkJob_DriverPodValue {
	if m != nil {
		return m.DriverPodValue
	}
	return nil
}

func (m *SparkJob) GetDriverPod() *core.K8SPod {
	if x, ok := m.GetDriverPodValue().(*SparkJob_DriverPod); ok {
		return x.DriverPod
	}
	return nil
}

func (m *SparkJob) GetDriverPodTemplateName() string {
	if m != nil {
		return m.DriverPodTemplateName
	}
	return ""
}

type isSparkJob_ExecutorPodValue interface {
	isSparkJob_ExecutorPodValue()
}

type SparkJob_ExecutorPod struct {
	ExecutorPod *core.K8SPod `protobuf:"bytes,12,opt,name=executorPod,proto3,oneof"`
}

func (*SparkJob_ExecutorPod) isSparkJob_ExecutorPodValue() {}

func (m *SparkJob) GetExecutorPodValue() isSparkJob_ExecutorPodValue {
	if m != nil {
		return m.ExecutorPodValue
	}
	return nil
}

func (m *SparkJob) GetExecutorPod() *core.K8SPod {
	if x, ok := m.GetExecutorPodValue().(*SparkJob_ExecutorPod); ok {
		return x.ExecutorPod
	}
	return nil
}

func (m *SparkJob) GetExecutorPodTemplateName() string {
	if m != nil {
		return m.ExecutorPodTemplateName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SparkJob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SparkJob_DriverPod)(nil),
		(*SparkJob_ExecutorPod)(nil),
	}
}

func init() {
	proto.RegisterEnum("flyteidl.plugins.SparkApplication_Type", SparkApplication_Type_name, SparkApplication_Type_value)
	proto.RegisterType((*SparkApplication)(nil), "flyteidl.plugins.SparkApplication")
	proto.RegisterType((*SparkJob)(nil), "flyteidl.plugins.SparkJob")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.SparkJob.HadoopConfEntry")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.plugins.SparkJob.SparkConfEntry")
}

func init() { proto.RegisterFile("flyteidl/plugins/spark.proto", fileDescriptor_ca8a069b9820144a) }

var fileDescriptor_ca8a069b9820144a = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x51, 0x8f, 0xd2, 0x40,
	0x10, 0xbe, 0x1e, 0xc7, 0xdd, 0x75, 0x38, 0xb9, 0x66, 0xf4, 0x72, 0x95, 0xf0, 0x40, 0x78, 0x11,
	0x4d, 0xdc, 0x1a, 0xd4, 0xc8, 0x19, 0x8d, 0x01, 0xa2, 0x22, 0x9a, 0x13, 0x0b, 0xb9, 0x44, 0xdf,
	0xb6, 0xed, 0x52, 0x1a, 0x4a, 0xb7, 0x69, 0xb7, 0x17, 0xf9, 0x03, 0xfe, 0x6e, 0xd3, 0xad, 0xb4,
	0xd0, 0x70, 0x97, 0xf8, 0xb6, 0xf3, 0xcd, 0x37, 0xdf, 0x37, 0x99, 0x99, 0x2c, 0x34, 0xe7, 0xfe,
	0x5a, 0x30, 0xcf, 0xf1, 0x8d, 0xd0, 0x4f, 0x5c, 0x2f, 0x88, 0x8d, 0x38, 0xa4, 0xd1, 0x92, 0x84,
	0x11, 0x17, 0x1c, 0xb5, 0x4d, 0x96, 0xfc, 0xcb, 0x36, 0x1e, 0xe7, 0x7c, 0x9b, 0x47, 0xcc, 0x10,
	0x34, 0x5e, 0xc6, 0x19, 0xb9, 0xd1, 0x74, 0x39, 0x77, 0x7d, 0x66, 0xc8, 0xc8, 0x4a, 0xe6, 0x46,
	0x2c, 0xa2, 0xc4, 0x16, 0x59, 0xb6, 0x3d, 0x00, 0x6d, 0x9a, 0x2a, 0xf7, 0xc3, 0xd0, 0xf7, 0x6c,
	0x2a, 0x3c, 0x1e, 0xb4, 0x09, 0x1c, 0xcd, 0xd6, 0x21, 0x43, 0x80, 0xe3, 0xc9, 0xcf, 0xd9, 0xe8,
	0xfb, 0xb5, 0x76, 0x80, 0xa7, 0x70, 0x34, 0xee, 0xdf, 0xf4, 0x35, 0x05, 0x55, 0xa8, 0x4e, 0x87,
	0xfd, 0x6f, 0x7d, 0xed, 0x10, 0xab, 0xa0, 0x98, 0x5a, 0xa5, 0xfd, 0xe7, 0x04, 0x4e, 0xa5, 0xc8,
	0x98, 0x5b, 0xf8, 0x03, 0xce, 0x69, 0xa1, 0x95, 0xea, 0xe8, 0x4a, 0x4b, 0xe9, 0xd4, 0xbb, 0x4f,
	0x48, 0xb9, 0x6b, 0x52, 0x76, 0x26, 0x29, 0xdd, 0x2c, 0xd7, 0xe3, 0x0b, 0x78, 0xb8, 0xa2, 0x5e,
	0xb0, 0x45, 0xfc, 0xe4, 0xf9, 0x4c, 0x3f, 0x6c, 0x29, 0x1d, 0xd5, 0xdc, 0x97, 0xc2, 0x26, 0xa8,
	0x29, 0x3c, 0xf4, 0x69, 0x1c, 0xeb, 0x15, 0xc9, 0x2b, 0x00, 0xfc, 0x0c, 0xaa, 0x9c, 0xe6, 0x90,
	0x07, 0x73, 0xfd, 0xa8, 0x55, 0xe9, 0xd4, 0xba, 0x4f, 0xef, 0x68, 0x6e, 0xcc, 0xad, 0xec, 0x91,
	0x72, 0x3f, 0x06, 0x22, 0x5a, 0x9b, 0x45, 0x2d, 0x8e, 0x01, 0x16, 0xd4, 0xe1, 0x3c, 0x94, 0x4a,
	0x55, 0xa9, 0xf4, 0xec, 0x1e, 0xa5, 0x51, 0x4e, 0xce, 0xa4, 0xb6, 0xaa, 0xb1, 0x0d, 0x67, 0xec,
	0x37, 0xb3, 0x13, 0xc1, 0xa3, 0x09, 0x15, 0x0b, 0xfd, 0x58, 0x76, 0xbd, 0x83, 0xe1, 0x07, 0xa8,
	0x3b, 0x54, 0x50, 0x2b, 0xf2, 0xec, 0x65, 0x2c, 0x3d, 0x4f, 0x5a, 0x4a, 0xa7, 0xd6, 0xbd, 0x24,
	0xd9, 0x8e, 0xc9, 0x66, 0xc7, 0x64, 0x2a, 0x77, 0x6c, 0x96, 0xe8, 0xd8, 0x81, 0xf3, 0x02, 0x99,
	0xf1, 0x25, 0x0b, 0xf4, 0x53, 0xe9, 0x53, 0x86, 0x91, 0x00, 0x16, 0xd0, 0x97, 0x20, 0x16, 0x34,
	0xb0, 0x99, 0xae, 0x4a, 0xf2, 0x9e, 0x0c, 0xbe, 0x06, 0xd5, 0x89, 0xbc, 0x5b, 0x16, 0x4d, 0xb8,
	0xa3, 0x83, 0xec, 0xea, 0xa2, 0x98, 0x44, 0x7a, 0x94, 0xe4, 0x6b, 0x2f, 0x9e, 0x70, 0x67, 0x74,
	0x60, 0x16, 0x4c, 0x7c, 0x05, 0x17, 0x79, 0x30, 0x63, 0xab, 0xd0, 0xa7, 0x82, 0x5d, 0xd3, 0x15,
	0xd3, 0x6b, 0xd2, 0x69, 0x7f, 0x12, 0xaf, 0xa0, 0x96, 0xcf, 0x85, 0x3b, 0xfa, 0xd9, 0x7d, 0x76,
	0x8a, 0xb9, 0xcd, 0xc5, 0x1e, 0x5c, 0x6e, 0x85, 0x3b, 0x96, 0x0f, 0xa4, 0xe5, 0x5d, 0xe9, 0xc6,
	0x3b, 0xa8, 0xef, 0x5e, 0x02, 0x6a, 0x50, 0x59, 0xb2, 0xb5, 0x3c, 0x6f, 0xd5, 0x4c, 0x9f, 0xf8,
	0x08, 0xaa, 0xb7, 0xd4, 0x4f, 0x36, 0xb7, 0x99, 0x05, 0x6f, 0x0f, 0x7b, 0x4a, 0xe3, 0x3d, 0x9c,
	0x97, 0xb6, 0xff, 0x3f, 0xe5, 0x03, 0x0d, 0xea, 0xf9, 0x28, 0x6e, 0x52, 0x74, 0x80, 0xa0, 0x6d,
	0x75, 0x9a, 0x61, 0x57, 0xbf, 0xde, 0xb8, 0x9e, 0x58, 0x24, 0x16, 0xb1, 0xf9, 0xca, 0x90, 0xe3,
	0xe0, 0x91, 0x6b, 0xe4, 0x7f, 0x83, 0xcb, 0x02, 0x23, 0xb4, 0x9e, 0xbb, 0xdc, 0x28, 0x7f, 0x2f,
	0xd6, 0xb1, 0x3c, 0x9d, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x4f, 0x9f, 0xa7, 0x79,
	0x04, 0x00, 0x00,
}
